{"version":"2.2.0","option":{"annote":{"autosave":true,"color":1,"effect":"normal","event":"click","exp_mode":"both","exp_name":"html","export":false,"hypothes":false,"keyboard":"Q Q","link":"[{{an_text}}]({{an_int_uri}})","off":false,"order":"auto","savelocal":false,"shortcuts":"M M","style":0,"trigger":true},"auto_mode":"read","automated":[{"action":[{"id":1663756989374,"value":"html"},{"disable":false,"id":1739239764081,"value":"offlinehtml"}],"bgColor":"#195bf7","color":"#fff","icon":"<i class=\"fas fa-project-diagram\"></i>","id":1663756989374,"name":"当加入稍后读时","target":"unreader","type":"auto"},{"action":[{"disable":false,"id":1663846286442,"value":"html"},{"disable":false,"id":1739239778324,"value":"offlinehtml"}],"bgColor":"#195bf7","color":"#fff","icon":"<i class=\"fas fa-project-diagram\"></i>","id":1663846286442,"name":"当加入标注时","target":"annote","type":"auto"}],"blacklist":["google.com","youtube.com","simp.red","simpread.herokuapp.com","simpread-test.herokuapp.com","simpread.ksria.cn","https://www.oschina.net/"],"br_exit":false,"create":"","darkmode":"manual","esc":true,"export":{"custom":[],"html":{"layout":"normal","proxy":true,"toc":true},"markdeep":{"custom":false,"template":""},"markdown":{"backlink":"","custom":false,"ext_uri":"","format":"","int_uri":"","single":false,"single_tmp":"","tag":"","tag_sep":"","template":""},"title":{"custom":true,"template":"{{id}}{{un_title}}{{mode}}"},"webhooks":[]},"lazyload":["baidu.com","weibo.com","youtube.com"],"manual":{"mode":"read","select":true,"shortcuts":"S S","site":"confirm"},"menu":{"blacklist":false,"exclusion":false,"focus":true,"lazyload":false,"link":false,"list":true,"manual":true,"option":true,"read":true,"unrdist":true,"whitelist":false},"notice":true,"origins":[],"plugins":["1VQ19jCD8Z","DH9l5jblPH","HD9GmoatXd","PcmPCT9rgM","UEzvAXNSe5","VQOZdNET2d","tMGXrU1v0U","tbjTx33iAA","y8Mai5IBwN"],"preload":true,"remote":{"export":{"attach":"ofhtml","epub":true,"kindle":false,"mail":true,"pdf":true,"plain":true},"parse":true,"port":7026,"rss":true,"sync":true},"save_at":"jianguo","secret":true,"shortcuts":"enable","sync":"2025年02月12日 14:31:42","uninstall":true,"unreader":{"autoiframe":false,"bottom":true,"exports":{"markdown":false,"pdf":false},"mode":"iframe","offline":true,"openmode":"evergreen","sametheme":true,"savelocal":false,"savetype":"ofhtml","search":true,"shortcuts":"D D","show":"senior","sidebar":true,"theme":"night"},"update":"2025年02月12日 14:31:42","urlscheme":true,"version":"2017-04-03"},"focus":{"auto":false,"bgcolor":"rgba( 235, 235, 235, 0.9 )","controlbar":true,"highlight":true,"mask":true,"opacity":90,"shortcuts":"A S","version":"2016-12-29"},"read":{"actionbar":{},"auto":false,"cleanup":true,"controlbar":true,"custom":{"art":{"color":"","fontFamily":"","fontSize":"","fontWeight":"","letterSpacing":"","lineHeight":"","textIndent":"","wordSpacing":""},"code":{"fontFamily":"","fontSize":""},"css":"","desc":{"color":"","fontFamily":"","fontSize":""},"pre":{"textShadow":""},"title":{"color":"","fontFamily":"","fontSize":""}},"exclusion":["v2ex.com","issue.github.com","readme.github.com","question.zhihu.com","douban.com","nationalgeographic.com.cn","tech.163.com","docs.microsoft.com","msdn.microsoft.com","baijia.baidu.com","code.oschina.net","http://www.ifanr.com","http://www.ifanr.com/news","http://www.ifanr.com/app","http://www.ifanr.com/minapp","http://www.ifanr.com/dasheng","http://www.ifanr.com/data","https://www.ifanr.com/app","http://www.ifanr.com/weizhizao","http://www.thepaper.cn","http://www.pingwest.com","http://tech2ipo.com","https://www.waerfa.com/social","github.com"],"fap":true,"fap_layout":"list","fontfamily":"","fontsize":"60%","highlight":true,"layout":"30%","lazyimg":true,"progress":true,"pure":true,"shortcuts":"A A","theme":"github","toc":true,"toc_hide":true,"version":"2017-03-16","whitelist":["https://sspai.com/post/*"]},"websites":{"custom":[],"local":[["https://ped-yc.github.io/**/*",{"desc":"[[{$('meta[name=Description]').attr('content')||$('meta[name=description]').attr('content')}]]","exclude":[],"include":"[[`//*[@id='swup']/div[1]/div[2]/div[1]/div[1]/div[1]/div[3]`]]","name":"ped-yc.github.io","title":"<title>"}],["https://www.yuque.com/**/*",{"desc":"[[{$('meta[name=Description]').attr('content')||$('meta[name=description]').attr('content')}]]","exclude":[],"include":"[[`//*[@id='doc-reader-content']`]]","name":"www.yuque.com","title":"<title>"}],["https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties#javascript_%E4%B8%AD%E7%9A%84%E5%80%BC",{"desc":"[[{$('meta[name=Description]').attr('content')||$('meta[name=description]').attr('content')}]]","exclude":[],"include":"[[`//*[@id='content']`]]","name":"developer.mozilla.org","title":"<title>"}],["https://dg.ped-yc.site/",{"desc":"[[{$('meta[name=Description]').attr('content')||$('meta[name=description]').attr('content')}]]","exclude":[],"include":"[[`//*[@id='quartz-body']/div[2]`]]","name":"dg.ped-yc.site","title":"<title>"}]],"person":[]},"statistics":{"read":125,"service":{"html":135,"markdown":149,"refslink":1,"save":3}},"user":{"avatar":"","contact":"","email":"zxc66war3@outlook.com","name":"风熏人醉","rule":2,"uid":"e65x4po0-hher-0joq-3ut3-jmubbt7rwslc"},"notice":{"latest":0,"read":[156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,21,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],"unsee":0},"unrdist":[{"url":"https://tech.meituan.com/2024/10/18/recce-in-meituan.html","title":"大前端：如何突破动态化容器的天花板？ - 美团技术团队","favicon":"https://awps-assets.meituan.net/mit/blog/v20190629/asset/icon/android-icon-192x192.png?v=Whistle&t=20181017-1r","img":"https://images.unsplash.com/photo-1737852329425-72d24726a617?crop=entropy&cs=srgb&fm=jpg&ixid=M3w0Njc1ODd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MzkzNDE2ODh8&ixlib=rb-4.0.3&q=85&fit=crop&w=880&max-h=540","desc":"长久以来，容器要实现动态化和双端复用，难免要牺牲掉一些性能。有没有办法让动态化容器的性能尽可能接近原生？美团金服大前端团队给出了一种解决方案，尝试突破动态化容器的天花板。","create":"2025年02月12日 14:28:10","idx":5,"annotations":[{"id":1739341902250,"color":1,"style":0,"tags":[],"note":"","type":"paragraph","html":"然后，剩下的问题就是设置属性、传递属性等成本，它们在实践的过程中，通常会成为页面渲染的一个瓶颈，事实上 React Native 也正在解决这个问题。基于此，我们决定保留下来 React Native 的 UIManager 的增、删、改等概念，以及 Yoga 布局，还有视图组件的封装，我们将这些保留了下来。后面，我们还会再讨论为什么没有使用 React Native 当前的属性转换的方式，这里不再展开讨论。","text":"然后，剩下的问题就是设置属性、传递属性等成本，它们在实践的过程中，通常会成为页面渲染的一个瓶颈，事实上 React Native 也正在解决这个问题。基于此，我们决定保留下来 React Native 的 UIManager 的增、删、改等概念，以及 Yoga 布局，还有视图组件的封装，我们将这些保留了下来。后面，我们还会再讨论为什么没有使用 React Native 当前的属性转换的方式，这里不再展开讨论。","annote":"<sr-annote data-id=\"1739341902250\">然后，剩下的问题就是设置属性、传递属性等成本，它们在实践的过程中，通常会成为页面渲染的一个瓶颈，事实上 React Native 也正在解决这个问题。基于此，我们决定保留下来 React Native 的 UIManager 的增、删、改等概念，以及 Yoga 布局，还有视图组件的封装，我们将这些保留了下来。后面，我们还会再讨论为什么没有使用 React Native 当前的属性转换的方式，这里不再展开讨论。</sr-annote>","items":[{"str":"然后，剩下的问题就是设置属性、传递属性等成本，它们在实践的过程中，通常会成为页面渲染的一个瓶颈，事实上 React Native 也正在解决这个问题。基于此，我们决定保留下来 React Native 的 UIManager 的增、删、改等概念，以及 Yoga 布局，还有视图组件的封装，我们将这些保留了下来。后面，我们还会再讨论为什么没有使用 React Native 当前的属性转换的方式，这里不再展开讨论。","root":"本文整理自美团技术沙龙第 83 期《前端新动向》（B 站视频）。长久以来，容器要实现动态化和双端复用，难免要牺牲掉一些性能。有没有办法让动态化容器的性能尽可能接近原生？美团金服大前端团队给出了一种解决方案，尝试突破动态化容器的天花板。\n\n1 动态化容器的天花板\n\n自 2015 年 React Native推出至今 9 年时间，各类容器（动态化容器简称，下同）方案已经成为业界前端的普遍选择。业界有微信（小程序）、抖音（Lynx）、拼多多（Lego）、支付宝（Nebula/BirdNest）、京东（Taro-Native）等。美团也有 MRN、MMP/MSC 等容器。可以说容器是前端工程的关键基石，也是绕不开的话题。\n\n过去我们做动态化改造主要为了解决以下问题：\n\n降研发成本：通过容器将多端合一，避免一个需求在每个端重复开发，以改善研发成本结构。随着 HarmonyOS NEXT 的推广，这个优势将变得更大。\n增部署效率：通过动态发布避开 App 集中集成，使得业务在移动端上可以独立部署和发布、实现 211 迭代，提升业务迭代面客效率。\n\n然而凡事有利必有弊，有用必有费。动态化容器在解决上述问题的同时也带来以下问题：\n\n降低页面成功：动态化容器引入了动态部署、解释器等更多的环节。在增加整体复杂度的同时，更多的环节也带来了更多的错误和计算开销，具体体现在页面白屏和页面加载耗时增加上。\n牺牲用户体验：动态化容器需要更多的硬件算力，相同的业务复杂度下，容器化页面相较原生页面更慢、更卡、不流畅，这在下沉市场设备上更为突出，卡顿甚至成为卡死。\n\n动态化容器的绝对天花板是原生应用，目前事实天花板是 React Native/WebView。\n\n定性地看前端容器天花板的问题，这里引述我们美团容器界的一位前辈的理论：性能、效能、动态化是动态化容器的不可能三角（下图左）。现有的通用的容器方案都是在这三个维度做 “三选二”。\n\n定量地看动态化容器，下图（右）展示了一个 3000 个相同视图节点的简单 Benchmark 页面。没有额外逻辑，也没有网络请求，以 React Native 为例，在同一台设备上，在 React Native 上做一个这个页面，动态化页面加载耗时大约是 Native 原生页面的 5 倍。\n\n这个测试结果不一定容易接受，但是很好理解。在相同的业务复杂度下，动态化容器为了实现动态化，引入了一个逻辑解释器，增加了解释执行和与解释器通信的额外计算开销，这就是动态化页面性能表现差的主要原因。既享受动态化的好处，又不牺牲用户性能体验，只在现有的方案上做选择是不可能达到的。不过金服大前端团队在这个问题上却是取得了一些实质性进展。\n\n先说一下我们目前取得的成果：美团金服前端团队做了一个新的容器 Recce，然后在同样的测试页中，我们将执行业务逻辑部分的速度提升了 8 倍，整体的页面加载速度提升了一倍。而在实际的业务中，页面加载速度也实现了 3 倍的提升，在兼顾动态化和效能的前提下，实现了性能的大跨步提升，性能表现接近 Native 原生。下文将重点介绍 Recce 具体是怎么实现的，希望能够给大家提供一些帮助或借鉴。\n\n2 容器分类及前期思考\n\n首先，当我们计划做一个容器之前，需要先对现有容器建立基本的认识。\n\n前端容器最重要部分之一在于绘制图形界面以完成人机交互，现有主要容器方案按照绘制方式可归纳为下列三类：\n\n第一类可以称为基于 Web 的方案，这类的共同特点就是调用 WebView， 通过 JavaScript 和 CSS 去绘制页面，然后通过 Web 提供的接口去和宿主通信。\n第二类称之为 “自己绘制”，它会调用更底层的 OpenGL 等图形的绘制框架，同时也会有自己的一套方案和语言去标记和编写自己的这些页面。\n第三类则是去调用系统的 UI 框架，就是基于平台提供的 UI 框架去进行绘制，和第二种的区别是，会有一层抹平平台差异的平台抽象层。\n\n对现有的容器再做进一步的结构分解，方便我们对不同容器方案之间做对比，这里拆分为四层：\n\n第一层，也就是最上层的 UI 框架，跟我们直接平时写的代码相关，它会直接决定业务代码的样子。\n第二层，其作用就像它的名字一样，也就是运行时支持，为运行 UI 框架提供支持，在这里会有解释器或者是标准库之类的东西。\n第三层，会对不同平台去做一层不同的抽象，比如像 RN 会对视图操作之类的统一为相同概念和统一接口。\n第四层，渲染层，对应着不同分类选择的各自的渲染的方式。\n\n那么下面，我们就会基于上图对现有容器这个分类和结构为认知基础，结合之前影响容器性能表现最大的因素在于逻辑解释器执行效率和逻辑解释器通信效率这个认知，再去考虑实现一个满足性能、安全、动态化的容器方案该怎么做。\n\n3 Recce 的选型与搭建\n\n所以如何选择 UI 框架、运行时支持、平台抽象层、渲染层 来实现一个高性能、安全的动态化容器呢。首先把渲染层放到最后，因为渲染层作为最底层并不影响上层选型。然后我们首先讨论运行时支持怎么选，准确的说是解释器和编程语言怎么选，因为编程语言会影响上层 UI 框架，而解释器也影响到平台抽象层中的通信部分，所以接下来的讨论顺序是：解释器 & 编程语言、UI 框架、渲染层以及整体架构这四部分。\n\n3.1 解释器 & 编程语言的选择\n\n解释器以 Wasm 为主， JavaScript 为辅\n\n前文也提到，我们期望能获得一个既能满足性能，又安全，同时还可以动态化这样的一个方案。既然必须动态化，就必须有逻辑解释器 [1]，问题就变成了怎样选一个性能好且安全的解释器，并且成本在可接受范围。现成的解释器还是不少的，前端范畴有 V8、JavaScriptCore、QuickJS 等 JavaScript 解释器，有符合 WebAssembly（后简称 Wasm） 规范的 Wasmer、WasmEdge[2]；大家日常工作中会接触到的 Ruby、Python；还有游戏行业用的比较多的 Lua、C#[3]。\n\n首先可以排除掉 Ruby 和 Python 这两个语言和解释器，无论是性能还是生态都不如 JavaScript。Lua 和 C# 也可以排除，主要是游戏生态和前端差距太远，晚饭想吃炸鸡，中午才开始孵蛋显然就来不及了。在 JavaScript 解释器和 Wasm 解释器两个大范围里，Wasm 解释器在性能和安全上较 JavaScript 解释器有决定性优势，生态上较 JavaScript 略差，但都在 W3C 标准范围内，一样可以运行在 H5 和小程序里，“晚饭想吃炸鸡，中午开始杀鸡还是来得及的”。\n\n所以在解释器的选型上，就确定了 Wasm 解释器为主，JavaScript 为辅的基本策略。而 Wasm 解释器具体选择是 Wasm3，原因有两方面：第一，这是在不支持 JIT[4] 下最快的 Wasm 解释器；第二，对包大小占用非常少。\n\n编程语言选择\n\n在确定了 Wasm 解释器之后，编程语言的选择就变成了，在支持 Wasm 的语言里选择性能、安全和成本最优的。理论上可以编译成 WebAssembly 执行的语言非常之多，但真正成熟到可以上生产环境的只有 C、C++、Rust、Go 这四种 [5]。首先可以先排除掉 C，虽然性能好但是不支持高级抽象只适合用在嵌入式等极端场景，不适合用来前端写业务。然后可以排除 C++，性能表现上 C++ 和 Rust 不相上下都好过 Go，但是错误管理和内存安全上输 Rust 一筹，并且 C++ 在前端业务层也是生态基本为零，不像 Rust 在前端生态发展迅猛。最后可以排除 Go，在性能表现上、类型系统设计、错误管理、还有前端生态上都输 Rust 一筹。\n\n综上所述，在运行时我们就选择了 Rust 和 Wasm3，JavaScript 和 QuickJS 后面再进行介绍。\n\n3.2 UI 框架\n\n用 JavaScript/QuickJS 的部分可以复用 Vue 或者 React，这些先不提。用 Rust 则必须要为运行时的上层设计一套 UI 框架，确定应该怎么样编写页面。这项工作的挑战在于，它并不像 JavaScript 生态，有多年的积累可供参考或复用，比如经典的 React 和 Vue。当然好处在于也没有历史包袱，所以必须要结合 Rust 语言的特点才能更好地完成这个任务。\n\nUI 框架大抵需要做到三点：（1）提供声明式 DSL 方便前端研发描述界面；（2）提供组件封装和状态管理能力完成业务逻辑和用户交互的衔接；（3）性能卓越。其中（1）和（2）在 JavaScript 生态中已经都有实现，（3）则未必，否则也不会有几十种 Web UI 框架并存这种局面。这个问题难在如何用 Rust 这门强类型纯静态语言去实现 JavaScript 弱类型动态语言实现的功能，并且要维持 Rust 零开销抽象的优势。\n\n为了解决这个问题，我们参考了 GitHub 上开源的各种框架。一方面参考了 Dioxus 的 DSL 设计和 UI 封装，另一方面也保持了 Rust-Dominator 观察者模式订阅变更的更新效率，我们将这两个优点合并到一起，就得到了 Recce UI，就其特点，没有 Diff，也没有 VDOM，跟 SolidJS 一样实现真正的订阅，我们也尽可能地去保证可以高效地构建 UI。下图中的表格对应的就是一些 Web 项目下的性能对比，这个也并没有直接对应到具体实践的容器上，因为我们也做了一个类似 Native 渲染的东西，所以这个表格对我们来说具备很好的参考价值，至少可以看到 Dominator 的更新效率还是很不错的。\n\n3.3 渲染层\n\n渲染层的选择则相对简单，如前述归纳实现一个渲染层大致三种方式：复用 WebView、自建渲染绘制器、调用系统 UI 框架。\n\n复用 WebView：如果追求高性能，这条路就不通，复用 WebView 意味着渲染指令 / 视图树 要用低效的方式以 WebView 的 JsCore 为跳板再去驱动 WebCore 做渲染。这和高性能就南辕北辙，还不如纯 H5 性能表现好。\n自建渲染绘制器：这条路技术上是行得通的，但目前走不得：第一，从代码量上看 Chromium 内核有数百万行 C++，考虑到跨平台兼容则过千万行代码，这个规模和复杂度是超过美团 App 本身，即使照着写一遍，没有数十名 C++ 专家投入三五年之功是看不到成效的。第二，当世只有 Google 和 Apple 有这个能力做成 WebView。FireFox 的新浏览器计划半途而废，微软则直接放弃转投 Chromium。\n调用系统 UI 框架：类似 RN 的方式，研发成本上是我们能接受的；渲染样式虽然没有 WebView 的 CSS 全，但是 Flex 足够支撑业务需求了，且保持是 W3C 的严格子集；RN 在性能上的问题主要出在通信层上，这个我们可以解决掉；最后也是最重要的是这个选择不是一个单向门，假如我们获得了驾驭 blink[6] 能力，那么就可以很低的成本平滑切换到 blink 上。\n\n所以渲染层就是复用了 React Native 的 Native 部分，我们决定要站在这个 “巨人” 的肩膀上开始行动。毕竟 React Native 已经提供了非常优秀的组件封装，同时它也解决了 Android 和 iOS 在渲染层面的差异，因为这些接口基本上都是在系统 UI 下进行封装的，所以我们有理由相信这些接口本身的性能是良好的。\n\n然后，剩下的问题就是设置属性、传递属性等成本，它们在实践的过程中，通常会成为页面渲染的一个瓶颈，事实上 React Native 也正在解决这个问题。基于此，我们决定保留下来 React Native 的 UIManager 的增、删、改等概念，以及 Yoga 布局，还有视图组件的封装，我们将这些保留了下来。后面，我们还会再讨论为什么没有使用 React Native 当前的属性转换的方式，这里不再展开讨论。\n\n3.4 整体架构\n\n最终，Recce 的概览如下图所示。这里重点讲下先前没有提及的 Recce Host 平台抽象层，这一层我们主要做了两件事：第一件，属性设置优化（或者叫渲染通信优化）；第二件，平台抽象。\n\n属性设置优化后文会详细介绍，这里只说平台抽象。我们结合 WebIDL 的设计和 LLVM 的架构理解，在平台抽象层上下都实现了标准接口。类似 llvm 的 MIR 使得编译器前端和编译器后端可以独立迭代和接入，平台抽象层的标准接口设计使得只要遵循渲染指令标准的解释器或者渲染器都可以很容易接入。这就是我们很容易把 QuickJS + Vue/React 支持了的原因。Recce-js 可以使线上的大部分以 JavaScript 为主的前端页面获得更好的性能表现。同样 Recce 的鸿蒙适配的成本也非常低，不需要上千或者几千 pd 那么多。最重要的是未来替换性能更好的解释器或者语言或者 UI 框架都是简单可行的。这一层是 Rust 实现的高效、安全且使得容器整体架构易扩展和易维护。\n\n综上选型和搭建工作基本上已经完成了。接下来，我们再对 Recce 上的一些细节问题进行补充。\n\n前面是讲道理，知已不易行更难。下文的 “干货” 可能才是决定成败的关键细节。\n\n4 Recce 的一些细节问题\n\n首先，就是上一节讨提到的，为什么没有使用 React Native 的属性转换？因为，我们发现属性转换是 React Native 一个性能瓶颈。其实为了评估这个问题，我们做了一个 3000 个节点的页面。当然，这个页面可能跟我们平时常见的页面长得不一样，但是它的渲染和布局成本和业务实际是比较接近的。\n\n页面的逻辑我们写得尽可能简单，同时去掉了 React Native 的启动时间，然后我们启用了原生代码，但是调用了 Yoga 的布局计算，就这样写了一个页面去做对比。最终发现，二者的耗时差距非常大，因为我们的布局方式是一样的，调用的 UI 也完全是相同的，基于此，我们基本上就可以认定剩下的 93% 的时间都是为了将设置页面的各种各样的数据从 JavaScript 传递到具体的平台，也就是说属性转换会耗费大量的时间。\n\n这里可以再深挖一下，为什么属性转换会耗费这么多的时间？我们稍微研究了一下这个问题后发现，主要还是因为 React Native 会有多次序列化和反序列化，这是一个类似于字典的东西，而且除了序列化的时间，还需要考虑构建字典本身需要的时间，还有执行字典的一些查找、设置等操作，最终我们还需要频繁地按照字典里面的 Key 值查找，查找到之后，再设置到具体的属性设置，而以上这些操作都会消耗掉不少的时间及内存。\n\n事实上，React Native 官方也正在尝试解决这个问题，在官方公布的的一个实验性的新的框架中，React Native 直接将一个 JSObject 转换成了一个 C++ 的静态类型（*Props），然后在对应的各个平台中，直接使用了一个转换后的静态类型。如此以来，实际上就只存一次 JSObject 这样字典就可以，从创建开始到最终设置，始终使用这个静态类型，那么剩下的操作都会变得非常高效了。\n\n同时，我们也会去思考应该怎么去解决属性传递以及查找的问题。这里可以简单看一下，我们常用的几种数据结构，都是基于数组、链表、哈希表、字典等等之类。但实际上，我们在这种场景下可以选择的可能就只有字典和数组，而 React Native 最常用的方式就是基于字典去构建各种各样的属性。但是基于字典这种方式并没有非常好的性能，如果传递的载体还是 JSON 字符串的时候，还需要承担 JSON 本身解析的任务。经过考量之后，我们最终决定采用基于索引的数组来构建一个个的属性值。\n\n但是采取这种模式的话，维护每个数组属性上的索引将会变得非常的复杂，我们借助一个属性定义生成各端代码维护这个索引，我们在运行前约定好每个属性的索引值，当然，我们会放弃一定的兼容性。其中一个放弃的例子就是，当我们约定好一个属性的索引值之后，之后就不能再修改这个属性的索引值本身，否则就会遇到属性设置可能会发生错乱的问题。\n\n类似的，我们也可以把组件注册的标识从字符串修改为索引，由于这个属性和组件不太一样，就无法知道客户端会提供哪些原生的组件，所以至少要在运行时去使用字符串获取一次组件信息。在获取之后，就可以使用获取的这个索引，从而保持一个比较快的匹配效率。\n\n最近，我们还做了一个富文本的标签，这个标签跟前两者相比就变得更不一样了。这里实际上输入的是一段 HTML 的字符串，所以输入的内容非常自由，我们没有办法像前两者一样使用一些静态的计算方式。但即便是富文本，仍然可以有一些已知的内容，比如像文本的样式、字符串等等，这些内容是可以提前知道的。而在这个层面，我们是可以做一些事情的，实际上可以基于所有输入的计算，得到一个完美的哈希函数，然后确保所有的输入不会发生碰撞。进而，在查找 Key 的时候就会变得快很多。\n\n以上，就是我们在遇到属性传递时解决的各种各样的问题。而接下来，我们还需要解决一个问题——跨语言的调用问题。当然，在讨论这个问题之前，我们先简单地将这些调用划分成了四类：\n\n第一类是 C 与 C 之间的调用，其实 C 语言本身并没有什么转换，这里只是把它作为一个最特殊的场景，进行归类处理。\n第二类是 Rust 去调用 C，这两种语言虽然也是直接在原生上去运行的，但是它们之间会增加了一些调用约定之类的转换。\n第三类是 Java 和 JavaScript 去调用 C，这就需要借助解释器提供的接口去进行调用，其中也会涉及更多的转换的工作，比如说两个内存空间之间的拷贝。\n第四类，我们认为它们其实更接近这个 IPC 的调用，比如像通过 WebView 提供的基于字符串传递的接口。\n\n在这种场景下，我们会有更多的转换工作以及一些编码约定的设置，所以我们必须要找到一种基于字符串编码方式去传递各种复杂的数据。而具体应用到 Recce 内部的时候，其实并不存在类似于 IPC 场景的调用，所以只需要解决每一层之间语言的调用。但实际上，我们仍然面对着非常复杂的调用这个事实。\n\n参考下图，可以看到每一层实际上都涉及到一个具体的跨语言调用。同时，还有刚刚提到的性属性设置，它则会跨过中间的所有层级，直接设置到具体的平台。最后要需要强调一下，涉及到具体的属性以及类似的一些方法调用，比如说打开相机，也会跨过中间层直接去做调用，而这个调用跟属性设置又存在很多不一样的地方。\n\n针对不同的调用场景，我们也采取了两种不同的解决方案：\n\n手写 + 辅助函数：通常用在不会频繁增改接口、手写本身已经比较好维护。\n接口定义 + 代码生成：可能频繁增改接口、手写维护会非常困难（还需要频繁维护文档）。\n\n具体来讲，我们分成了以下 4 个场景：\n\n属性设置：把定义的属性 props_gen 生成 Recce Ul+ Vue + React + Android + iOS+HarmonyOs 等各种属性的操作代码。\nRust（Wasm3）：扩展 wit-bindgen支持 Wasm3。\nQuickJS：借助 Rust 宏封装一些本地函数（UI 操作接口）+ 自定义的二进制读写实现。\n业务方法调用 & 平台抽象层与 Platform 交互：使用 mako完成接口调用和文档生成。\n5 总结和展望\n\n最终我们获得了一个如上图的高性能、安全的动态化容器，可以以 Wasm 的方式支持原生级别的性能，也可以将 JavaScript 的前端工程的性能提升一截。\n\n从某个角度看，像是我们把 RN 用 Rust 重写了，添加了 Wasm 解释器的支持。但用熟悉 WebView 架构的视角看，也可以看作是一个 WebEngine Lite，只是试图绘制暂时用的系统 UI。\n\n文章最后做一下回望和展望。\n\n回望：我们所做的所有架构和优化工作都可以概括为，区分本质复杂度和偶然复杂度，恰当的回应本质复杂度，降低偶然复杂度。\n\n动态化容器的本质复杂度是什么？最主要的一条脉络是，渲染管线，以前端研发的编码逻辑和数据为输入，在管线中变为组件树 -> 虚拟文档树 -> 文档树 -> 视图树 / 样式树 -> 图层树 -> 呈现树，最终绘制到屏幕上为用户所眼见视图为输出。至于用什么 DSL、编程语言、解释器、编码方式等等其实是偶然复杂度。\n\nRecce 的选型和搭建过程，实际上是围绕渲染管线进行优化，比如精简流程去掉了 VDOM 等环节，比如简化运行时、选用执行效率更高的解释器和编码方式等，再比如削峰填谷、消除瓶颈以提升渲染管线整体效率等。而这些工作都是为了降低容器本身的计算开销，因为动态化容器相对业务而言也是偶然复杂度。将终端有限的软硬件计算资源更多的留给业务本质复杂度是容器迭代的正确方向。\n\n展望：目前 Recce 还在逐步完善和落地推广阶段，可以做的事情有很多：\n\n改善开发体验：比如引入 LLM 来降低 Rust 的学习门槛和开发成本，比如完善调试 & 脚手架工具链等等。\n进一步优化性能：比如以 Rust 原生方式运行以获得超过 Android 原生的性能表现；比如利用 Wasm 解释器线性内存特性，可以在 CI 上完成大部分的预计算，进一步提升加载性能表现；\n自研渲染层：这样一是能进一步提高性能，二也能降低多端维护成本，三是把样式能力集对齐到 WebView 可以实现和 H5、小程序的同构。当然这样其实就是 一个完整的 WebEngine Lite 了。\n6 Q & A\n\nQ：Recce 的性能如何？可以把这个问题更具象化一些吗？\n\nA：目前从我们已经实践的范围中，在我们业务场景中能够找到最低端的 POS 设备上面，Recce UI 是可以和 Flutter 的性能表现媲美，而且我们是在动态解释运行，而 Flutter 是原生运行。也就是实现了原生级别的性能表现。\n\nQ：以后 JS 没用了吗？\n\nA：JS 有用的，但这个问题分两个层面回答。第一层，Recce 是支持这个 JS 运行时和相应生态的。比较极端的场景，比如说 POS 机，下沉市场的低端机，或者说对于性能要求很高的，比如说像 App 的首页冷启动，或者说像这个支付收银台等等这种场景下，优化性能的收益很大，那么就可以考虑用 Recce-rs 这个方案。如果不是这么极端的一般场景，我们用这个 Recce-js 的方案也能获得一个低成本，获得一个性能优化。性能优化是没有止境的，根据业务场景的需要去选择，Recce 提供了更多且更好的选择。\n\n第二层，移动端开发从一开始就有原生开发和 H5/JS 开发（PhoneGap 发布于 2009 年），但 JS 成为主流，始于 2015 年，Google 把 V8 适配到了 Android 上。这里就不是 JS 行不行，而是 V8 很行。 终端硬件的计算资源始终是有限的，V8 通过解释器层面 JIT/AOT 编译技术 大幅提升了 JS 的运行效率，使得 JS 铺开成为可能。但近几年 JS 引擎不再有大幅度迭代，手机硬件算力的升级速度也明显放缓，这就导致了终端上 软硬件计算容量的提升速度跟不上业务复杂度的提升速度。这才是当下 JS 技术栈面临的问题，也是为什么有如此多 JS 框架在卷性能的原因。\n\n当然大家不用特别悲观，JS 和 Web 始终是互联网最重要的基础设施，事物是呈现螺旋发展趋势的（当然有人负责发展，有人负责螺旋），随着周期演变，新的软硬件技术升级又会推动 JavaScript 往前发展。比如如果一个使用 TypeScript/JavaScript 的高性能解释器出来，那么能够使现在的 JavaScript 工程性能大幅度提升，毕竟前端线上代码资产 90% 是以 JavaScript 形式存在的。\n\nQ：为什么叫 Recce ？\n\nA：Recce/ˈrɛkiː/ 名字取自海豹部队的一把枪。选择这个名字的初衷是因为在 Recce-rs 选型的时候，目标是接近原生的性能表现、还要动态化，那么肯定要舍弃一部分开发体验的，切换 Rust 语言上会对研发同学增加学习成本、抬高门槛。因为预判到这一点，所以我们希望使用 Recce 的同学始终记得是经过了更多的训练的精英，要克服各种困难去完成高价值的任务。凡事有利必有弊，有用比有费，对于需要使用 Recce-rs 优化的场景 学习 Rust 就不是最难的技术问题。我们在为高价值场景提供更好的选择的同时，也将部分优化能力通过 Recce-js 反哺到一般业务场景上。不同的场景不同的成本结构，没有最好，只有合适的方案。\n\nQ：Recce 为什么要追求原生级别的性能？\n\nA：主要有三点原因。\n\n一、前端提升性能体验可以提升用户体验和业务获客效率\n\n前端部署和面客是重叠的过程，前端部署成功率影响业务面客。部署成功率低意味着，客户遇到白屏或不愿意等待最终放弃。提升性能可以提升前端部署成功率，进而可以提升用户体验和业务获客效率。\n\n部署：代码离开开发环境，到用户终端设备运行前的这段环节为部署。\n\n二、追求原生级别性能的动态化容器是公司业务的发展需要\n\n美团业务的首要特点是低毛利，低毛利意味着业务发展需要做大规模，提升 UE，提升复购。\n\n做大规模，意味着要争取广大下沉市场。那么在性能体验上就需要至少 Meet 友商，在下沉市场表现最好的应用（微信、拼多多）的主要功能都是原生实现的。争取下沉市场扩大规模在前端的命题意味着提供原生级别的性能体验，在下沉市场这可能不再是体验好坏而是能否使用的问题。\n提升 UE，意味着必须要考虑研发人效，前端提研发人效就必须考虑跨平台同构，因此需要容器化，将多端开发降为一端开发。\n提升复购，复购意味着多业态混合经营，那么在包大小约束下就必须要让大部分业务动态化。\n\n综上，公司业务发展的需要决定了美团需要原生级别性能的动态化容器。\n\n三、部署是前端工程领域的核心问题，容器是部署问题的主要答案\n\n把时间拨回到 2010 年，彼时移动端开发方兴未艾，主要的技术栈只有 Native 和 H5（PhoneGap 为代表），其中 Native 性能表现好但不跨端、H5 迭代效率高但性能体验差。随着时间推移，Native 方向为了解决跨端研发成本和部署效率，发展出了 ReactNative、Flutter 等等方案，H5 方向为了改善性能，发展出了离线化、SSR/ESR、解释器优化等等。\n\n可以说两个方向是相向而行，其实这是一个问题的两个面。究其根本在于前端代码运行在不受我们控制且计算资源有限的用户设备上，不同于后端的主要问题是高并发，前端的主要问题是怎样把代码低成本跨过物权边界送到大规模且不同的用户的设备上并高效运行起来。\n\n回顾过去，性能表现好原生要做动态化降低部署成本，部署成本低的 H5 要优化性能提升用户体验。换句话说，前端工程领域的核心问题是部署成本和用户体验的平衡。比如包大小就是原生开发部署成本高而非常困扰客户端开发的一个典型例子。\n\n注释\n[1] 逻辑解释器：在 iOS 中 Apple 不允许 JIT，只可以解释执行。\n[2] WasmEdge：亚马逊用做云原生的 Wasm 解释器。\n[3] C#：黑神话悟空就是用魔改 USharp 跑的游戏逻辑。\n[4] 不支持 JIT ：Apple 不允许在 iOS 上 JIT。\n[5] C、C++、Rust、Go 这四种\n[6] blink：chromium 的布局渲染器。"}]}],"tags":[],"note":""},{"annotations":[],"create":"2025年02月11日 10:16:08","desc":"好久没更新文章了，这一憋就是一个大的。说起 js 中的概念，执行上下文和作用域应该是大家最容易混淆的，你说混淆就混淆吧，其实大多数人在开发的时候不是很关...","favicon":"https://static.segmentfault.com/main_site_next/prod/favicon.ico","idx":4,"img":"https://images.unsplash.com/photo-1725161650998-6b5f9a806df6?crop=entropy&cs=srgb&fm=jpg&ixid=M3w0Njc1ODd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MzkyNDAwNTV8&ixlib=rb-4.0.3&q=85&fit=crop&w=880&max-h=540","note":"","tags":[],"title":"(……) javascript - 彻底明白作用域、执行上下文 - 个人文章 - SegmentFault 思否","url":"https://segmentfault.com/a/1190000013915935"},{"annotations":[{"annote":"<sr-annote data-id=\"1739238600624\">更加简单的来说，就是如果多个页面符合同一站点，这几个页面会分配到一个渲染进程中去, 所以有这样子的一种情况, 一个页面崩溃了，会导致同一个站点的其他页面也奔溃，这是因为它们使用的是同一个渲染进程。</sr-annote>","color":1,"html":"更加简单的来说，就是如果多个页面符合同一站点，这几个页面会分配到一个渲染进程中去, 所以有这样子的一种情况, 一个页面崩溃了，会导致同一个站点的其他页面也奔溃，这是因为它们使用的是同一个渲染进程。","id":1739238600624,"items":[{"root":"个人理解\n\n提供一种情况，就是同一站点, 围绕这个展开也行。\n\nChrome 的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫 process-per-site-instance。\n\n更加简单的来说，就是如果多个页面符合同一站点，这几个页面会分配到一个渲染进程中去, 所以有这样子的一种情况, 一个页面崩溃了，会导致同一个站点的其他页面也奔溃，这是因为它们使用的是同一个渲染进程。\n\n有人会问为什么会跑到一个进程里面呢?\n\n你想一想呀, 属于同一家的站点，比如下面三个:\n\n它们在一个渲染进程中的话，它们就会共享 JS 执行环境，也就是 A 页面可以直接在 B 页面中执行脚本了, 有些时候就是有这样子的需求嘛。","str":"更加简单的来说，就是如果多个页面符合同一站点，这几个页面会分配到一个渲染进程中去, 所以有这样子的一种情况, 一个页面崩溃了，会导致同一个站点的其他页面也奔溃，这是因为它们使用的是同一个渲染进程。"}],"note":"","style":0,"tags":[],"text":"更加简单的来说，就是如果多个页面符合同一站点，这几个页面会分配到一个渲染进程中去, 所以有这样子的一种情况, 一个页面崩溃了，会导致同一个站点的其他页面也奔溃，这是因为它们使用的是同一个渲染进程。","type":"paragraph"}],"create":"2025年02月11日 09:36:15","desc":"想要成为一名合格的前端工程师，掌握相关浏览器的工作原理是必备的，这样子才会有一个完整知识体系，要是「能参透浏览器的工作原理，你就能解决80%的前端难题」。 要介绍进程与线程的话，需要先讲解下并行处理，了解了并行处理的概念，再理解进程和线程之间的关系就会变得轻松许多。 计算机中的…","favicon":"https://lf-web-assets.juejin.cn/obj/juejin-web/xitu_juejin_web/static/favicons/favicon-32x32.png","idx":3,"img":"https://images.unsplash.com/photo-1736938204652-eb5bc2f72b83?crop=entropy&cs=srgb&fm=jpg&ixid=M3w0Njc1ODd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MzkyMzc3MTN8&ixlib=rb-4.0.3&q=85&fit=crop&w=880&max-h=540","note":"","tags":[],"title":"「浏览器工作原理」写给女友的秘籍 - 浏览器组成 & 网络请求篇（1_2W 字)","url":"https://juejin.cn/post/6846687590540640263"},{"annotations":[{"annote":"<sr-annote data-id=\"1726358374692\">对我来说，无论是哪个来源，只要能让我主动订阅、筛选和检索，都有价值。然而，许多来源由于商业化考虑，会插入个性化广告或推荐刺激多巴胺的内容，让人一不小心就滑入成瘾、失控的境地。</sr-annote>","color":1,"html":"对我来说，无论是哪个来源，只要能让我主动订阅、筛选和检索，都有价值。然而，许多来源由于商业化考虑，会插入个性化广告或推荐刺激多巴胺的内容，让人一不小心就滑入成瘾、失控的境地。","id":1726358374692,"items":[{"root":"好消息是，RSS 可以有效缓解这类问题，并且在 LLM 时代焕发出新的生机。","str":"对我来说，无论是哪个来源，只要能让我主动订阅、筛选和检索，都有价值。然而，许多来源由于商业化考虑，会插入个性化广告或推荐刺激多巴胺的内容，让人一不小心就滑入成瘾、失控的境地。"}],"note":"","style":0,"tags":[],"text":"对我来说，无论是哪个来源，只要能让我主动订阅、筛选和检索，都有价值。然而，许多来源由于商业化考虑，会插入个性化广告或推荐刺激多巴胺的内容，让人一不小心就滑入成瘾、失控的境地。","type":"paragraph"}],"create":"2024年09月15日 07:59:17","desc":"前言在这个数字时代，我们有很多信息来源：多媒体：新闻网站、Medium、电子书、研报、在线期刊社交媒体：Twitter、Instagram、Facebook、LinkedIn 流媒体：YouTube、T ......","favicon":"https://cdn-static.sspai.com/favicon/sspai.ico","idx":2,"img":"https://cdnfile.sspai.com/2024/07/12/255ddbb2ead1104308d5a826a64be47a.png","note":"","tags":[],"title":"如何用 AI 重塑我们的信息获取流程？","url":"https://sspai.com/post/90423"},{"annotations":[{"annote":"<sr-annote data-id=\"1726323551130\">AI 的发展速度实在是太快了，每天、每个月都有大量新的信息。</sr-annote>","color":1,"html":"AI 的发展速度实在是太快了，每天、每个月都有大量新的信息。","id":1726323551130,"items":[{"root":"你是不是在每天看公众号文章、刷小红书、刷短视频的时候，也看到很多 AI 相关的推送：昨天马斯克开源了 Grok、今天阿里开启了通义灵码的内测、明天 KimiChat 又开启了 200W 上下文的模型内测、Suno.ai 3.0 又上线了生成的音乐质量大大提高…… 但因为有大量的信息差，自己又不知道应该如何学习 AI ，留给自己的只有一堆问题：","str":"AI 的发展速度实在是太快了，每天、每个月都有大量新的信息。"}],"note":"","style":0,"tags":[],"text":"AI 的发展速度实在是太快了，每天、每个月都有大量新的信息。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726322333453\">如果我不学习 AI 的话，我会不会被落下？AI 可以给我的生活带来哪些帮助？我想要学习 AI，应该怎么学？这些问题，最终变成了信息焦虑。</sr-annote>","color":1,"html":"如果我不学习 AI 的话，我会不会被落下？AI 可以给我的生活带来哪些帮助？我想要学习 AI，应该怎么学？这些问题，最终变成了信息焦虑。","id":1726322333453,"items":[{"root":"所以今天就讲一下，我是如何学习 AI 的。","str":"如果我不学习 AI 的话，我会不会被落下？AI 可以给我的生活带来哪些帮助？我想要学习 AI，应该怎么学？这些问题，最终变成了信息焦虑。"}],"note":"","style":0,"tags":[],"text":"如果我不学习 AI 的话，我会不会被落下？AI 可以给我的生活带来哪些帮助？我想要学习 AI，应该怎么学？这些问题，最终变成了信息焦虑。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726318118280\">生成式 AI 都可以理解为 AI 在文字的提示下生成内容。根据内容载体不同，则可以分为这几个方向：文生文、文生图、文生视频和文生音频。</sr-annote>","color":1,"html":"生成式 AI 都可以理解为 AI 在文字的提示下生成内容。根据内容载体不同，则可以分为这几个方向：文生文、文生图、文生视频和文生音频。","id":1726318118280,"items":[{"root":"文生文：ChatGPT、Claude、KimiCChat、文心一言、通义千问等等，都是大语言模型，可以理解为是文字生文字，只要你提供一份提示词，他就会按照你的要求生成文字。将生成的文字的场景扩展一下，就包括了写作，总结，对话，情感分析等等场景。\n文生图、图生图：经常刷到的 Stable Diffusion、Midjourney 都是基于 diffusion 技术，通过输入一段提示词，AI 就会生成对应的图片。\n文生视频：前段时间爆火的 Sora，就是 OpenAI 公司的文生视频技术，这项技术在还没有任何公测内测的情况下，仅仅依靠 openAI 公司放出的视频预览就引爆了全球。另外，基于 diffusion 技术的 Stable Video Diffusion（简称 SVD) 也在发展之中。\n文生音频：TTS 技术，可以用来做音色复刻、语音合成、音乐合成等等，这些技术我没有系统地研究过，只知道有这些作用。","str":"生成式 AI 都可以理解为 AI 在文字的提示下生成内容。根据内容载体不同，则可以分为这几个方向：文生文、文生图、文生视频和文生音频。"}],"note":"","style":0,"tags":[],"text":"生成式 AI 都可以理解为 AI 在文字的提示下生成内容。根据内容载体不同，则可以分为这几个方向：文生文、文生图、文生视频和文生音频。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726403971044\">时间轴上</sr-annote><sr-annote data-id=\"1726403971044\">，你需要了解 AI 的大概发展历程，这里推荐一本书叫《深度学习革命》，讲的是 GPT3.5 之前的深度学习往事，可以让你对深度学习短暂的历史有一个初步的了解。</sr-annote>","color":1,"html":"<strong>时间轴上</strong>，你需要了解 AI 的大概发展历程，这里推荐一本书叫《深度学习革命》，讲的是 GPT3.5 之前的深度学习往事，可以让你对深度学习短暂的历史有一个初步的了解。","id":1726403971044,"items":[{"root":"时间轴上，你需要了解 AI 的大概发展历程，这里推荐一本书叫《深度学习革命》，讲的是 GPT3.5 之前的深度学习往事，可以让你对深度学习短暂的历史有一个初步的了解。","str":"时间轴上"},{"root":"时间轴上，你需要了解 AI 的大概发展历程，这里推荐一本书叫《深度学习革命》，讲的是 GPT3.5 之前的深度学习往事，可以让你对深度学习短暂的历史有一个初步的了解。","str":"，你需要了解 AI 的大概发展历程，这里推荐一本书叫《深度学习革命》，讲的是 GPT3.5 之前的深度学习往事，可以让你对深度学习短暂的历史有一个初步的了解。"}],"note":"","style":0,"tags":[],"text":"时间轴上，你需要了解 AI 的大概发展历程，这里推荐一本书叫《深度学习革命》，讲的是 GPT3.5 之前的深度学习往事，可以让你对深度学习短暂的历史有一个初步的了解。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726321428862\">当需要某项技能的时候，一定要想办法在最短的时间里弄清楚都有哪些最少必要知识。然后迅速掌握他们。</sr-annote>","color":1,"html":"当需要某项技能的时候，一定要想办法在最短的时间里弄清楚都有哪些最少必要知识。然后迅速掌握他们。","id":1726321428862,"items":[{"root":"掌握了最少必要知识，就可以打败其余 80% 的人。就好像在球类运动中，练好基本功，就可以打败 90% 的人类一样，在任何一个领域掌握「最小必要知识」，都可以快速与其他人拉开差距。","str":"当需要某项技能的时候，一定要想办法在最短的时间里弄清楚都有哪些最少必要知识。然后迅速掌握他们。"}],"note":"","style":0,"tags":[],"text":"当需要某项技能的时候，一定要想办法在最短的时间里弄清楚都有哪些最少必要知识。然后迅速掌握他们。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726404395235\">在 AI 领域，需要掌握的最小必要知识，我认为是生成式 AI 的原理和使用</sr-annote><sr-annote data-id=\"1726404395235\">。如上文提到的，了解当下最流行的生成式大语言模型和稳定扩散技术，并在自己的工作和生活中应用，就可以打败 80% 的人。</sr-annote>","color":1,"html":"<strong>在 AI 领域，需要掌握的最小必要知识，我认为是生成式 AI 的原理和使用</strong>。如上文提到的，了解当下最流行的生成式大语言模型和稳定扩散技术，并在自己的工作和生活中应用，就可以打败 80% 的人。","id":1726404395235,"items":[{"root":"在 AI 领域，需要掌握的最小必要知识，我认为是生成式 AI 的原理和使用。如上文提到的，了解当下最流行的生成式大语言模型和稳定扩散技术，并在自己的工作和生活中应用，就可以打败 80% 的人。在这里推荐我的朋友——随意搜寻 Newsletter 主理人 Jimmy 的入门课程。","str":"在 AI 领域，需要掌握的最小必要知识，我认为是生成式 AI 的原理和使用"},{"root":"在 AI 领域，需要掌握的最小必要知识，我认为是生成式 AI 的原理和使用。如上文提到的，了解当下最流行的生成式大语言模型和稳定扩散技术，并在自己的工作和生活中应用，就可以打败 80% 的人。在这里推荐我的朋友——随意搜寻 Newsletter 主理人 Jimmy 的入门课程。","str":"。如上文提到的，了解当下最流行的生成式大语言模型和稳定扩散技术，并在自己的工作和生活中应用，就可以打败 80% 的人。"}],"note":"","style":0,"tags":[],"text":"在 AI 领域，需要掌握的最小必要知识，我认为是生成式 AI 的原理和使用。如上文提到的，了解当下最流行的生成式大语言模型和稳定扩散技术，并在自己的工作和生活中应用，就可以打败 80% 的人。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726321536501\">prompt 就是提示词的意思，这个词以后会经常用到，在文生图、文生视频等等场景中，prompt 就是提示词的意思。</sr-annote>","color":1,"html":"prompt 就是提示词的意思，这个词以后会经常用到，在文生图、文生视频等等场景中，prompt 就是提示词的意思。","id":1726321536501,"items":[{"root":"你给模型提供一个提示词，它会按照你的提示词生成内容。在大语言模型领域，好的 prompt 可以帮助你显著提高模型的生成效果。如果你要有文本生成的场景，学习结构化的 prompt 是必须的。","str":"prompt 就是提示词的意思，这个词以后会经常用到，在文生图、文生视频等等场景中，prompt 就是提示词的意思。"}],"note":"","style":0,"tags":[],"text":"prompt 就是提示词的意思，这个词以后会经常用到，在文生图、文生视频等等场景中，prompt 就是提示词的意思。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1726321694314\">最近 </sr-annote><sr-annote data-id=\"1726321694314\">Suno</sr-annote><sr-annote data-id=\"1726321694314\"> 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。</sr-annote>","color":1,"html":"最近 <a href=\"https://sspai.com/link?target=https%3A%2F%2Fsuno.com%2F\" target=\"_blank\">Suno</a> 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。","id":1726321694314,"items":[{"root":"最近 Suno 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。","str":"最近 "},{"root":"最近 Suno 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。","str":"Suno"},{"root":"最近 Suno 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。","str":" 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。"}],"note":"","style":0,"tags":[],"text":"最近 Suno 更新了 v3 版本的模型，生成的音乐质量好了非常多，因此也受到了一波广泛的关注。你可以让 ChatGPT 帮你生成一段歌词，然后将歌词交给 Suno 生成一段音乐试试。","type":"paragraph"}],"create":"2024年09月14日 20:47:49","desc":"不学习 AI 会不会被落下、AI 可以给我带来哪些帮助、想要学习 AI 应该从何开始…… 这些问题，最终变成了信息焦虑。","favicon":"https://cdn-static.sspai.com/favicon/sspai.ico","idx":1,"img":"https://cdnfile.sspai.com/","note":"","tags":[],"title":"如何进入生成式 AI 的新范式","url":"https://sspai.com/post/88960"},{"annotations":[],"create":"2024年09月14日 20:35:46","desc":"RSS 是什么？根据维基百科的定义，RSS 的全称是 RDFSiteSummary(RDF 站点摘要) 或 ReallySimpleSyndication(简易信息聚合)，RSS 是一种消息来源的格式规范，用来同步 ......","favicon":"https://cdn-static.sspai.com/favicon/sspai.ico","idx":0,"img":"https://cdnfile.sspai.com/2024/06/11/3ca40d082676e607afadf7eea2bba819.png","note":"","tags":[],"title":"AI 复兴 RSS ？","url":"https://sspai.com/post/89494"}],"collections":[{"create":"2024年08月15日 00:52:45","desc":"默认合辑","id":1723654365747,"idx":1723654365747,"items":[{"annotations":[{"annote":"<sr-annote data-id=\"1723654268483\">因为目前使用的 RSS 阅读器是 Reeder，而 Reeder 支持的自建 RSS 服务只剩下了 FreshRSS 和 Google Reader API 以及 Fever（Reeder 不推荐），综合社区活跃度、第三方 App 支持程度、上手难度以及灵活性，最终选择了 FreshRSS。</sr-annote>","color":1,"html":"<p>因为目前使用的 RSS 阅读器是 Reeder，而 Reeder 支持的自建 RSS 服务只剩下了 FreshRSS 和 Google Reader API 以及 Fever（Reeder 不推荐），综合社区活跃度、第三方 App 支持程度、上手难度以及灵活性，最终选择了 FreshRSS。</p><h3 id=\"sr-toc-2\"></h3>","id":1723654268483,"items":[{"root":"安装","str":"因为目前使用的 RSS 阅读器是 Reeder，而 Reeder 支持的自建 RSS 服务只剩下了 FreshRSS 和 Google Reader API 以及 Fever（Reeder 不推荐），综合社区活跃度、第三方 App 支持程度、上手难度以及灵活性，最终选择了 FreshRSS。"}],"note":"","style":0,"tags":[],"text":"因为目前使用的 RSS 阅读器是 Reeder，而 Reeder 支持的自建 RSS 服务只剩下了 FreshRSS 和 Google Reader API 以及 Fever（Reeder 不推荐），综合社区活跃度、第三方 App 支持程度、上手难度以及灵活性，最终选择了 FreshRSS。","type":"paragraph"},{"annote":"<sr-annote data-id=\"1723654279868\">点击右上角的齿轮图表进入</sr-annote><sr-annote data-id=\"1723654279868\">-</sr-annote><sr-annote data-id=\"1723654279868\">，可以进行更详细的配置：</sr-annote><sr-annote data-id=\"1723654279868\">管理</sr-annote><sr-annote data-id=\"1723654279868\">系统设置</sr-annote>","color":1,"html":"点击右上角的齿轮图表进入<code>管理</code>-<code>系统设置</code>，可以进行更详细的配置：","id":1723654279868,"items":[{"root":"\n点击右上角的齿轮图表进入管理-系统设置，可以进行更详细的配置：","str":"点击右上角的齿轮图表进入"},{"root":"\n点击右上角的齿轮图表进入管理-系统设置，可以进行更详细的配置：","str":"-"},{"root":"\n点击右上角的齿轮图表进入管理-系统设置，可以进行更详细的配置：","str":"，可以进行更详细的配置："},{"root":"\n点击右上角的齿轮图表进入管理-系统设置，可以进行更详细的配置：","str":"管理"},{"root":"\n点击右上角的齿轮图表进入管理-系统设置，可以进行更详细的配置：","str":"系统设置"}],"note":"","style":0,"tags":[],"text":"点击右上角的齿轮图表进入-，可以进行更详细的配置：管理系统设置","type":"paragraph"}],"unread":{"create":"2024年08月14日 23:15:30","desc":"为什么要自己搭建 RSS 服务在 2020 年的今天，各种推荐算法和信息流已经很完善了，而选择使用 RSS 这种获取信息的方式，一方面是为了不陷入推荐算法的信息茧房，另一个原因是为了能够无障碍获取到外文信息。","favicon":"https://cdn-static.sspai.com/favicon/sspai.ico","idx":28,"img":"https://cdnfile.sspai.com/editor/u_nl6l6ykv/16092280976250.jpg","note":"","tags":[],"title":"再次折腾 RSS 之搭建 FreshRSS 服务","url":"https://sspai.com/post/64289#!"}}],"tags":[],"title":"Default"}],"plugstorge":{"1VQ19jCD8Z":{"addunread":true,"advuri":false,"annote":"o b a a","annote_props":"o b a c","assets":false,"assets_abs":false,"assets_custom":"","assets_image":"http","assets_type":"1","custom":{"markdown":{"backlink":"","custom":false,"ext_uri":"","format":"","int_uri":"","single":false,"single_tmp":"","tag":"","tag_sep":"","template":""},"title":{"custom":true,"template":"{{id}}{{un_title}}{{mode}}"}},"endpoint":"http://127.0.0.1:27123","folder":"SimpRead","host":"http://localhost:7027","metadata":"---\nurl: {{url}}\ntitle: {{title}}\ndate: {{date}}\ntags: {{tags}}\nbanner: \"{{cover}}\"\nbanner_icon: 🔖\n---","org_title":false,"path":"","post":false,"sync":true,"template":true,"title":"{{id}}-{{title}}{{mode}}","token":"","unread_new":"o b u n","unread_update":"o b u u","valut":"content","yaml":true},"DH9l5jblPH":{"an_addshort":"o b a a","an_changshort":"o b a c","an_service":"-1","clean_notify":true,"service":"-1","shortcut":"","un_addshort":"o b u n","un_changshort":"o b u u","un_service":"-1","unauto":"","unread":false,"version":"1.1.0"},"HD9GmoatXd":{"annote_tmpl":"<%\nlet colors = [ '#B4D9FB', '#ffeb3b', '#a2e9f2', '#a1e0ff', '#a8ea68', '#ffb7da' ],\n    color  = colors[ annote.color ];\n-%>\n> [📌](<{{an_int_uri}}>) <mark style=\"background-color: <%= color %>\">Highlight</mark> {{an_tags}}\n{{{html_format|>|{{an_html}}}}}\n\n<% if (annote.note) { -%>\n> [!note] 笔记\n> {{an_note}}\n<% } %>\n","custom":{"markdown":{"backlink":"","custom":false,"ext_uri":"","format":"","int_uri":"","single":false,"single_tmp":"","tag":"","tag_sep":"","template":""}},"ext_uri":"","slide":true,"tag_prefix":"#","tag_suffix":"","title":"[[{{id}}-{{title}}@annote]]","unread_tmpl":"---\ntitle: \"srAnnote@{{title}}\"\nalias: [<% if ( unread.note && unread.title != unread.note ) { %>\"srAnnote@{{note}}\",<% } %>\"srAnnote@{{title}}\"]\nauthor: {{author}}\ndescription: {{desc}}\ntags: {{tags}}\n---\n# {{title}}\n\n> [!md] Metadata  \n> **标题**:: \"{{title}}\"  \n> **日期**:: [[{{create|yyyy-mm-dd}}]]  \n> **原文链接**:: [原文链接]({{url}})\n> **内部链接**:: [内部链接]({{int_uri}})\n> **外部链接**:: [外部链接](https://dg.ped-yc.site/Simpread/{{idx}}-{{title}})\n<% if ( unread.refs ) { -%>\n> **外部引用**:: {{refs}}  \n<% } %>\n<% if ( unread.desc ) { %>\n> [!summary] 描述  \n> <%- unread.desc %>\n<% } %>\n## Annotations\n<% if ( unread.annotations.length > 0 ) { %>\n{{annotations}}\n<% } %>"},"PcmPCT9rgM":{"cover":"body","mini_width":true,"origin":"meta","safari":false,"un_query":"{{width}}x362","un_size":"","un_source":"","unsplash":true,"whitelist":""},"UEzvAXNSe5":{},"VQOZdNET2d":{},"tMGXrU1v0U":{},"tbjTx33iAA":{"exist":"false"},"y8Mai5IBwN":{"auto":false,"break":true,"clear":true,"line":false,"prefix":"","quit":true,"save":true,"toolbar":true,"tooltip":true}},"secret":{"dropbox":{"access_token":""},"evernote":{"access_token":""},"flomo":{"access_token":""},"focusnote":{"access_token":""},"gdrive":{"access_token":"","folder_id":""},"github":{"access_token":"","path":"","repo":""},"hypothes":{"access_token":"6879-ZzC6t26Muog8hjvPKmLz5tXf76vZxRi8mfkDF9PlFPI","group_id":""},"instapaper":{"access_token":"","token_secret":""},"jianguo":{"access_token":{"password":"aadnvkwv45nzj68t","username":"2366131783@qq.com"},"password":"aadnvkwv45nzj68t","username":"2366131783@qq.com"},"joplin":{"access_token":"","folder_id":""},"linnk":{"access_token":"","group_name":""},"notion":{"access_token":"","folder_id":"","save_image":false,"type":""},"onenote":{"access_token":""},"pocket":{"access_token":"","tags":""},"version":"2021-01-19","webdav":[],"weizhi":{"access_token":"","folder":"","host":"","kbGuid":"","kbServer":"","password":"","username":""},"yinxiang":{"access_token":""},"youdao":{"access_token":"","folder_id":""},"yuque":{"access_token":"","repos_id":""}}}